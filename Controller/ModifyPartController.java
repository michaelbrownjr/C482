package Controller;

import Model.InHouse;
import Model.Outsourced;
import Model.Inventory;
import Model.Part;
import java.io.IOException;
import java.util.Optional;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import static Model.Inventory.updatePart;

/**
 *
 * @author
 * Michael Brown
 * mbro549@my.wgu.edu
 * Student ID: 000861887
 */

/** Creates an ModifyPartController class for the AddPart XML Scene */
public class ModifyPartController {

    Part selectedPart;
    int selectedIndex;
    
    
    @FXML
    private RadioButton InhouseRadioButton;

    @FXML
    private RadioButton OutsourcedRadioButton;

    @FXML
    private TextField NameInhouseModifyPartText;

    @FXML
    private TextField InventoryInhouseModifyPartText;

    @FXML
    private TextField PriceCostInhouseModifyPartText;

    @FXML
    private TextField MaxInhouseModifyPartText;

    @FXML
    private TextField MinInhouseModifyPartText;

    @FXML
    private TextField MachineIDInhouseModifyPartText;

    @FXML
    private Button CancelButton;

    @FXML
    private Button SaveButton;


    /** This function is called when the InHouse Radio button is pressed.
     * When it's pressed, the title for machineLable is changed to "Machine ID".
     * @param event is not used in this function. This was generated by the SceneBuilder
     * */
    @FXML
    public void InhouseHandler(ActionEvent event) {
        machineLabel.setText("Machine ID");

    }
    /**@param event is not used in this function. This was generated by the SceneBuilder
     * */
    @FXML
     void InventoryInhouseModifyPartText(ActionEvent event) {

    }
    /**@param event is not used in this function. This was generated by the SceneBuilder
     * */
    @FXML
     void MachineIDInhouseModifyPartText(ActionEvent event) {

    }
    /**@param event is not used in this function. This was generated by the SceneBuilder
     * */
    @FXML
     void MaxInhouseModifyPartText(ActionEvent event) {

    }
    /**@param event is not used in this function. This was generated by the SceneBuilder
     * */
    @FXML
     void MinInhouseModifyPartText(ActionEvent event) {

    }
    
    @FXML
    private Label machineLabel;
    /**@param event is not used in this function. This was generated by the SceneBuilder
     * */
    @FXML
     void NameInhouseModifyPartText(ActionEvent event) {

    }
    /** This function is called when the Outsourced Radio button is pressed.
     * When it's pressed, the title for machineLable is changed to "Company Name".
     * @param event is not used in this function. This was generated by the SceneBuilder
     * */
    @FXML
    public void OutsourcedHandler(ActionEvent event) {

        machineLabel.setText("Company Name");
    }
    /**@param event is not used in this function. This was generated by the SceneBuilder
     * */
    @FXML
    public void PriceCostInhouseModifyPartText(ActionEvent event) {

    }
    /** This function cancels any changes that are done in the Add Part Scene when the "Cancel"
     * button is pressed.
     * @param event is not used in this function. This was generated by the SceneBuilder
     * @throws IOException if some I/O error has occurred.
     * */
    @FXML
   public void cancelHandler(ActionEvent event) throws IOException {
        
        
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "This will clear all text field " +
                "values, do you want to continue?");
        
        Optional<ButtonType> result = alert.showAndWait();
        if(result.isPresent() && result.get() == ButtonType.OK) {
          
        Stage stage = (Stage)((Button)event.getSource()).getScene().getWindow();
        Object scene = FXMLLoader.load(getClass().getResource("/View/MainScreen.fxml"));
        stage.setScene(new Scene((Parent) scene));
        stage.show();
        }

    }
    /**This function gathers checks to see if a valid value in all fields have been inserted.
     * If they values have been inserted correctly, values are all saved and depending on if the
     * InHouse or Outsourced Radio button is clicked a new
     * InHousePart or OutsourcedPart will be
     * added to the Inventory.
     * The AddPart Scene is closed upon Save button event is pressed.
     *
     * I ran into a logical error where the Min stock value was swapping with the Max stock value
     * . I would only see it when I go to modify the Part. I was able to fix it by defining the
     * Min stock with the text set by the Min field and the Max stock with the text from the Max
     * field. Initially I had them swapped on accident.
     *
     * @param event runs when the Save button is clicked. The ModifyPart Scene will end and
     *              will open the MainScreen Scene.
     * @throws IOException if an I/O error occurs.
     * */
    @FXML
    public void saveHandler(ActionEvent event) throws IOException {
       


       try {
           if (!(Integer.class.isInstance(Integer.parseInt(InventoryInhouseModifyPartText.getText())))){
               Alert alert = new Alert(Alert.AlertType.ERROR, "Inventory value you chose needs to be a number.");
               alert.showAndWait();
           } else if (!(Double.class.isInstance(Double.parseDouble(PriceCostInhouseModifyPartText.getText())))){
               Alert alert = new Alert(Alert.AlertType.ERROR, "Price value you chose needs to be a number.");
               alert.showAndWait();
           }
           else if (Integer.parseInt(MinInhouseModifyPartText.getText()) > Integer.parseInt(MaxInhouseModifyPartText.getText())) {
               Alert alert = new Alert(Alert.AlertType.ERROR, "Min value cannot be greater than Max value.");
               alert.showAndWait();
           } else if (Integer.parseInt(InventoryInhouseModifyPartText.getText()) > Integer.parseInt(MaxInhouseModifyPartText.getText()) || Integer.parseInt(InventoryInhouseModifyPartText.getText()) < Integer.parseInt(MinInhouseModifyPartText.getText())) {
               Alert alert = new Alert(Alert.AlertType.ERROR, "Inventory amount must be between minimum and maximum values.");
               alert.showAndWait();
           }
           else {
               int id = selectedPart.getId();
               String name = NameInhouseModifyPartText.getText();
               int inventory = Integer.parseInt(InventoryInhouseModifyPartText.getText());
               double price = Double.parseDouble(PriceCostInhouseModifyPartText.getText());
               int max = Integer.parseInt(MaxInhouseModifyPartText.getText());
               int min = Integer.parseInt(MinInhouseModifyPartText.getText());

               if (InhouseRadioButton.isSelected()) {

                   int machineID = Integer.parseInt(MachineIDInhouseModifyPartText.getText());

                   InHouse inhousePart = new InHouse(id, name, price, inventory, min, max, machineID);
                   Inventory.getAllParts().set(selectedIndex, inhousePart);
               }

               if (OutsourcedRadioButton.isSelected()) {

                   String companyName = MachineIDInhouseModifyPartText.getText();

                   Outsourced outsourcedPart = new Outsourced(id, name, price, inventory, min, max, companyName);
                   Inventory.getAllParts().set(selectedIndex, outsourcedPart);
               }

               Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
               Object scene = FXMLLoader.load(getClass().getResource("/View/MainScreen.fxml"));
               stage.setScene(new Scene((Parent) scene));
               stage.show();
           }
       }
       catch(NumberFormatException e){


           Alert alert = new Alert(Alert.AlertType.WARNING);
           alert.setTitle("Warning Dialog");
           alert.setContentText("Please enter a valid value for each text field.");
           alert.showAndWait();

       }

    }

    /** This function is called to set each property that has been modified in the
     * selectedPart and is called when the modifications were saved in the SavePartHandler
     *
     * I ran into a logical error when setPart was called. Despite the function setting all of
     * the properties onto the selectedPart, the modifications weren't being shown in the
     * Part pane on the main screen. I ran a debugger on this function and found that I needed
     * to call the "updatePart" function which updates the product in the Part pane on the
     * main screen.
     *
     * A future feature request would be to have Part property values derived from a database
     * that automatically updates the properties when Outsourced part have price changes, name
     * changes,
     * and more.
     * @param part the object that will be modified.
     * @param index the index of the object that will be changed.
     * */
    public void setPart(Part part, int index) {
        selectedPart = part;
        selectedIndex = index;
        
         if (part instanceof InHouse) {

            InHouse newPart = (InHouse) part;
            InhouseRadioButton.setSelected(true);
            machineLabel.setText("Machine ID");
            this.NameInhouseModifyPartText.setText(newPart.getName());
            this.InventoryInhouseModifyPartText.setText((Integer.toString(newPart.getStock())));
            this.PriceCostInhouseModifyPartText.setText((Double.toString(newPart.getPrice())));
            this.MinInhouseModifyPartText.setText((Integer.toString(newPart.getMin())));
            this.MaxInhouseModifyPartText.setText((Integer.toString(newPart.getMax())));
            this.MachineIDInhouseModifyPartText.setText((Integer.toString(newPart.getMachineID())));
            updatePart(selectedIndex, newPart);

        }

        if (part instanceof Outsourced) {

            Outsourced newPart = (Outsourced) part;
            OutsourcedRadioButton.setSelected(true);
            machineLabel.setText("Company Name");
            this.NameInhouseModifyPartText.setText(newPart.getName());
            this.InventoryInhouseModifyPartText.setText((Integer.toString(newPart.getStock())));
            this.PriceCostInhouseModifyPartText.setText((Double.toString(newPart.getPrice())));
            this.MinInhouseModifyPartText.setText((Integer.toString(newPart.getMin())));
            this.MaxInhouseModifyPartText.setText((Integer.toString(newPart.getMax())));
            this.MachineIDInhouseModifyPartText.setText(newPart.getCompanyName());
            updatePart(selectedIndex, newPart);
        }  
    }
}
